
ENTRY:
    jt $v0, {
        0 => SNR_0,
        1 => SNR_1,
    }
    EXIT 0, 0

// This is a function
// It accepts arguments through argument registers
// One can define aliases for argument registers in the parenthesis
// One can also list registers that should be preserved in the function prologue ($v2-$v3 in this case)
function FUN_UTIL($hello, $world), $v2-$v3
    add $v2, $hello, $world
    mul $v1, 10.0, $v2
    add $v1, 1000
endfun

function /* I am a comment */ VECTOR_LEN_SQUARED($x, $y)
    exp $v1,\
     $x .* $x + \
     $y .* $y
endfun

// more comments

/* I am a comment
     that spans multiple lines
     */   // and I am a comment too!

function GCD($a, $b)
    jc $b != 0, _RECUR // I am a comment too!
    mov $v1, $a
    return

_RECUR:
    exp $a, $a mod $b
    call GCD, $b, $a
endfun

// Subroutines don't have arguments
// they are kind of simpler version of functions
// I _think_ they are a strict subset of functions, but technically they are implemented differently and are sometimes used in the scenario, so we have to support them too
subroutine SHOW_STUFF
    MSGSET -1, "Hello, world!"
endsub

SNR_0:
    MSGSET 7502, "Fuck you!"
    MSGSET 7503, "Fuck you!", nowait // nowait is a kind of keyword argument, Not sure about the design yet

    gosub SHOW_STUFF

    WAIT 60
    WAIT 60, interruptable
    EXIT 0, 1

SNR_1:
    EXIT 0, 2